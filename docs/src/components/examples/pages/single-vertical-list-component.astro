---
import SingleVerticalListOfPokemonsVue from "@/components/examples/vue/SingleVerticalListOfPokemons.vue";
import SingleVerticalListOfPokemonsSvelte from "@/components/examples/svelte/SingleVerticalListOfPokemons.svelte";
import { SingleVerticalListOfPokemons as SingleVerticalListOfPokemonsReact } from "@/components/examples/react/SingleVerticalListOfPokemons.tsx";
import { type FRAMEWORKS_TYPE } from "@/types";
import PageComponent from "./shared/page-component.astro";
import { getI18N } from "@/i18n";

interface Props {
  framework: FRAMEWORKS_TYPE;
}
const { currentLocale } = Astro;
const { framework } = Astro.props;

const i18n = getI18N({ currentLocale });

const verticalList=`
<script setup lang="ts">
import { ref } from "vue";
import { useDragAndDrop } from "fluid-dnd/vue";
import type { Pokemon } from "./Pokemon";
import PokemonComponent from "./PokemonComponent.vue";
import { fetchPokemons } from "@/server/pokemonServer";

const pokemons = ref([] as Pokemon[]);
pokemons.value = await fetchPokemons(3);
const [ parent ] = useDragAndDrop(pokemons,{
  draggingClass: "dragging-pokemon"
});
</script>
<template>
  <div class="flex max-sm:justify-center items-start">
    <div
      ref="parent"
      class="bg-gray-200/60 border-solid border-black/40 rounded-2xl w-60 border-4 p-4 block"
    >
      <PokemonComponent
        v-for="(pokemon, index) in pokemons"
        :key="pokemon.name"
        :index="index"
        :pokemon="pokemon"
      />
    </div>
  </div>
</template>
`
const verticalListSvelteCode=`
  <script lang="ts">
  import { useDragAndDrop } from "fluid-dnd/svelte";
  import type { Pokemon } from "./Pokemon";
  import PokemonComponent from "./PokemonComponent.svelte";
  import { fetchPokemons } from "@/server/pokemonServer";

  let pokemons = $state([] as Pokemon[]);
  fetchPokemons(3).then((newPokemons) => {
      pokemons.push(...newPokemons);
  });
  const [ parent ] = useDragAndDrop(pokemons, {
    draggingClass: "dragging-pokemon",
  });
  </script>
  <div class="flex max-sm:justify-center items-start">
    <div
      use:parent
      class="bg-gray-200/60 border-solid border-black/40 rounded-2xl w-60 border-4 p-4 block"
    >
    {#each pokemons as pokemon, index (pokemon.name)}
      <PokemonComponent
        index={index}
        pokemon={pokemon}
      />
    {/each}
    </div>
  </div>
  `
const verticalListReact = `
import { useDragAndDrop } from "fluid-dnd/react";
import type { Pokemon } from "../Pokemon";
import { fetchPokemons } from "@/server/pokemonServer";
import { PokemonComponent } from "./PokemonComponent";
import { useEffect } from "react";

export const SingleVerticalListOfPokemons: React.FC = () => {
  const [ parent, listOfPokemons, setPokemons ] = useDragAndDrop<Pokemon, HTMLDivElement>([], {
    draggingClass: "dragging-pokemon",
  });
  useEffect(() => { 
      const fetchPokemonse = async () => {
          const newPokemons = await fetchPokemons(3);
          setPokemons(newPokemons);
      }
      fetchPokemonse();
  }, [])

  return (
    <div className="flex max-sm:justify-center items-start">
      <div
        ref={parent}
        className="bg-gray-200/60 border-solid border-black/40 rounded-2xl w-60 border-4 p-4 block"
      >
        {
          listOfPokemons.map((pokemon, index) => (
            <PokemonComponent
              key={pokemon.name}
              className="min-w-44 max-sm:min-w-32"
              index={index}
              pokemon={pokemon}
            />
          ))
        }
      </div>
    </div>
  )
}
`
const fileName = 'SingleVerticalListOfPokemons';
---
<PageComponent title={i18n.SINGLE_VERTICAL_LIST} framework={framework} vueCode={verticalList} svelteCode={verticalListSvelteCode} reactCode={verticalListReact} fileName={fileName}>
  <fragment slot="vue">
    <SingleVerticalListOfPokemonsVue client:load />
  </fragment>
  <fragment slot="svelte">
    <SingleVerticalListOfPokemonsSvelte client:load />
  </fragment>
  <fragment slot="react">
    <SingleVerticalListOfPokemonsReact client:load />
  </fragment>
</PageComponent>

<style>
 select {
    background-color: auto !important;
  }

</style>